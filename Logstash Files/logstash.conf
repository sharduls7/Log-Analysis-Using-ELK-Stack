input{

   #file{
   #  path => "C:/Elastic_Stack/data/*csv"
   # start_position => "beginning"
   # sincedb_path => "NULL"  
   #}
   
    beats {
        port => "5044"
    }
}

filter {
  
    if([message] == "" ) { drop{} }

	if([fields][log_type] == "cafe_log") 
	{	
		grok 
		{
			patterns_dir => "./patterns/"
			match => {
						"message" => [ 
										"%{TIMESTAMP_ISO8601:logtimestamp} .* %{IMP_LOGLEVEL:imploglevel} %{GREEDYDATA:log_msg}" , 
										"%{IMP_LOGLEVEL:imploglevel} %{GREEDYDATA:log_msg}" 
									 ]
					 } 
			add_field => { "subType" => "loglevel" }
			remove_tag => ["_grokparsefailure"]			   
		} 
		if "_grokparsefailure" in [tags] 
		{
	   
			grok
			{	
				patterns_dir => "./patterns/"	  
				match => { 
							"message" => [
											"%{TIMESTAMP_ISO8601:logtimestamp} .* %{FULL_STACKTRACE:FullStacktrace}" ,
											"%{FULL_STACKTRACE:FullStacktrace}"
										 ]
						 }
    
				add_field => { "subType" => "exception" }
				remove_tag => ["_grokparsefailure"]
			}
		}
		if "_grokparsefailure" in [tags] 
		{
			grok
			{			
				patterns_dir => "./patterns/"	  
				match => { 
							"message" => "%{CUSTOM_ERROR:randomErrorInLog}"
						 }
				add_field => { "subType" => "randomErrorMsg" }
				remove_tag => ["_grokparsefailure"]
			}
		}	  
		if "_grokparsefailure" in [tags] 
		{
			grok
			{	
				patterns_dir => "./patterns/"	  
				match => { 
							"message" => "%{CUSTOM_WARNING:randomWarningInLog}"
						 }
				add_field => { "subType" => "randomWarningMsg" }
				remove_tag => ["_grokparsefailure"]
			}
		}
		if "_grokparsefailure" in [tags]{
			drop{}
		}
		
		mutate {
		  gsub => ['message', "\n\t", " "]
		  gsub => ['FullStacktrace', "\t", " "]
		  gsub => ['exceptionText', "\t", " "]
		  gsub => ['stacktracepart', "\t", " "]
		}
	
	}	
	elseif([fields][log_type] == "prep_access_log") {
 
		grok
		{
			match => {
						"message" => "%{COMMONAPACHELOG}"
					 }
		}
        geoip {
			source => "clientip"
			target => "geoip"
			add_field => [ "[geoip][coordinates]", "%{[geoip][longitude]}" ]
			add_field => [ "[geoip][coordinates]", "%{[geoip][latitude]}"  ]
		}
		mutate {
			convert => [ "[geoip][coordinates]", "float"]
			gsub => ['auth', "-", "User Not Logged-In"]
		}
	}
  					   
}

output{

  elasticsearch{
    hosts => ["localhost:9200"]
    index => "cafe_log-%{+YYYY.MM.dd}"
  }
  
  stdout{ codec => rubydebug }
}